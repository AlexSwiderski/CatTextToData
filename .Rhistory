"Sad"), std.lv = TRUE)
summary(Fit1, fit.measures=TRUE, standardize = TRUE)
model <- '
#Measurement Model
ACOM =~ tscore
N_Mood =~ Lonely + Anxious + Angry + Sad
CD =~ Mood + Satisfaction + Restriction
#Regressions
CD ~ ACOM + N_Mood
#Correlation/Covariance
ACOM ~~ N_Mood
#Fixing variance of latent variable acom to .97
tscore ~~ .03*99.83*tscore
'
View(all_data)
version
package.version(tidyr)
?packageVersion
packageVersion(tidyr)
packageVersion(tidyr)
packageVersion("tidyr")
packageVersion("dplyr")
packageVersion("reshape2")
packageVersion("lavaan")
packageVersion("cowplot")
packageVersion("semPlot")
packageVersion("ggplot")
packageVersion("ggplot2")
install.packages("tm")
library(tm)
setwd("~/Documents/University of pittsburgh/Courses/Structural equation modeling-Wright")
readDOC("Final review")
??readDOC
textfunc <- readDOC(engine = c("antiword"))
version
library(tidyr)
library(dplyr)
library(reshape2)
library(lavaan)
library(blavaan)
library(sirt)
setwd("C:/Users/Brahma/Desktop/Alex/Structural Equation Modeling")
setwd("/Volumes/NO NAME/Structural Equation Modeling")
#data
bossdata <- read.csv("bossdata.csv")
cat <- read.csv("itemLevelData_cat_Alex.csv")
acom <- read.csv("acom.csv")
#fixing data structure of CAT data
cat_wide <- dcast(cat, examinee  ~ category, value.var = "tscore")
#Adding CAT modality mean T score
cat_wide$meanTscore <- rowMeans(cat_wide[3:8])
#Extracting relevant boss indicators
boss <- data.frame(
examinee = bossdata$examinee,
Mood = bossdata$BCMM,
Satisfaction = bossdata$BCMS,
Restriction = bossdata$BCMA,
Lonely = bossdata$BNM1,
Anxious = bossdata$BNM2,
Angry = bossdata$BNM3,
Sad = bossdata$BNM4)
boss[,c("Mood",
"Satisfaction",
"Restriction",
"Lonely",
"Anxious",
"Angry",
"Sad")] <-
lapply(boss[,c("Mood",
"Satisfaction",
"Restriction",
"Lonely",
"Anxious",
"Angry",
"Sad")], ordered)
#creating one data frame
cattbl <- as.tbl(cat_wide)
acomtbl <- as.tbl(acom)
data <- full_join(cattbl, acomtbl)
all_data <- full_join(data, boss)
sem_data <- all_data[ -c(1, 1,10,12)]
??ggpairs
?nlimb
??nlimb
library(psych)
View(sem_data)
library(tabulizer)
library(rJava)
library(rJava)
library("rJava")
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jre1.8.0_161')
library("rJava")
library("rJava")
library("rJava")
library("rJava")
sudo R CMD javareconf
library("rJava")
library(tabulizer)
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
x <- (rnorm(n = 1000, mean = 0, sd = 1))
data <- data.frame(x = x)
library(ggplot2)
ggplot(data = data, aes(x = x)) + geom_histogram(binwidth = 0.2, aes(fill = ..count..) )
ggplot(data = data, aes(x = x)) + geom_histogram(binwidth = 0.2)
geom_segment(aes(x=-1, xend=-1, y = 0, yend=87.5) +
ggplot(data = data, aes(x = x)) + geom_histogram(binwidth = 0.2, aes(fill = ..count..) ) +
geom_segment(aes(x=-1, xend=-1, y = 0, yend=87.5)) +
geom_segment(aes(x=1, xend=1, y = 0, yend=87.5))
#Creating data for King Markov Example
set.seed(8)
num_weeks <- 1e5
positions <- rep(0, num_weeks)
current <- 10
for (i in 1:num_weeks) { # record current position
positions[i] <- current # flip coin to generate proposal
proposal <- current + sample(c(-1, 1), size = 1) # now make sure he loops around the archipelago if (proposal < 1)
proposal <- 10 if (proposal > 10) proposal <- 1 # move?
prob_move <- proposal / current
current <- ifelse(runif(1) < prob_move, proposal, current) }
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!",
subtitle = "The dots show the king's path over the first 100 weeks.") +
theme_ipsum()
library(tibble)
library(ggplot2)
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!",
subtitle = "The dots show the king's path over the first 100 weeks.") +
theme_ipsum()
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!",
subtitle = "The dots show the king's path over the first 100 weeks.")
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!",
subtitle = "The dots show the king's path over the first 100 weeks.")
#Creating data for King Markov Example
num_weeks <- 1e5
positions <- rep(0, num_weeks)
current   <- 10
for (i in 1:num_weeks) {
# record current position
positions[i] <- current
# flip coin to generate proposal
proposal <- current + sample(c(-1, 1), size = 1)
# now make sure he loops around the archipelago
if (proposal < 1) proposal <- 10
if (proposal > 10) proposal <- 1
# move?
prob_move <- proposal / current
current   <- ifelse(runif(1) < prob_move, proposal, current)
library(tidyverse)
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!",
subtitle = "The dots show the king's path over the first 100 weeks.")
}
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!",
subtitle = "The dots show the king's path over the first 100 weeks.")
tibble(week   = 1:1e5,
island = positions) %>%
Plot <- ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!",
subtitle = "The dots show the king's path over the first 100 weeks.")
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "Behold: The Metropolis algorithm in action!") +
theme(plot.title = element_text(hjust = 0.5))
tibble(week   = 1:1e5,
island = positions) %>%
ggplot(aes(x = week, y = island)) +
geom_point(shape = 1) +
scale_x_continuous(breaks = seq(from = 0, to = 100, by = 20)) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
coord_cartesian(xlim = 0:100,
ylim = 1:10) +
labs(title    = "King Markov's Path") +
theme(plot.title = element_text(hjust = 0.5))
library(tibble)
library(ggplot2)
library(rethinking)
library(rstan)
library(brms)
library(dplyr)
library(tidyr)
library(tidyverse)
library(mvtnorm)
library(plotly)
library(MASS)
debugSource('~/Documents/Bayesian Inference presentation/code.R', echo=TRUE)
######Linear Regression#######
#load data
library(rethinking)
data("Howell1")
d <- Howell1
detach(package:rethinking, unload= T)
#Peak at the variables
head(d)
d %>% str()
#Get to know our variabl
summary(d)
#Make a new data frame with only adults (age 18+)
d2 <-
d %>% filter( age >= 18)
naive_model <-
brm(
data = d2,
family = gaussian,
formula = height ~ 1,
prior = c(prior(normal(178, 20), class = Intercept),
prior(cauchy(0, 1), class = sigma)),
iter = 10000,
warmup = 3000,
chains = 4,
cores = 4,
seed = 4,
save_all_pars = TRUE)
library(tibble)
library(ggplot2)
library(rethinking)
library(rstan)
library(brms)
library(dplyr)
library(tidyr)
library(tidyverse)
library(mvtnorm)
library(plotly)
library(MASS)
Height_by_weight_model <-
brm(data = d2, family = gaussian,
height ~ 1 + weight,
prior = c(prior(normal(156, 100), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 3), class = sigma)),
iter = 10000,
warmup = 3000,
chains = 4,
cores = 4,
seed = 4,
save_all_pars = TRUE)
cor_data <- Height_by_weight_model$data
cor(cor_data)
posterior_samples(Height_by_weight_model) %>%
cor()
dat <- data.frame(y = rnorm(3))
V <- cbind(c(0.5, 0.3, 0.2), c(0.3, 1, 0.1), c(0.2, 0.1, 0.2))
fit <- brm(y~1, data = dat, autocor = cor_fixed(V))
print(fit)
View(dat)
vcov(Height_by_weight_model)
vcov(Height_by_weight_model, correlation = TRUE)
cor(d2$height, d2$weight)
posterior_samples(Height_by_weight_model) %>%
cor()
bayes_R2(Height_by_weight_model)
x <- bayes_factor(Height_by_weight_model, naive_model)
x <- bayes_R2(Height_by_weight_model)
View(x)
.5680935^.5
posterior_linpred(Height_by_weight_model)
post_line_pred_data <- posterior_linpred(Height_by_weight_model)
View(post_line_pred_data)
plot(post_line_pred_data)
?posterior_linpred
post_line_pred_data <- posterior_linpred(Height_by_weight_model, resp = "height")
View(post_line_pred_data)
plot(post_line_pred_data)
post_line_pred_data <- posterior_linpred(Height_by_weight_model, formula(height ~ 1 + weight))
post_line_pred_data <- posterior_linpred(Height_by_weight_model, formula(height ~ 1 + weight), scale = "linear")
post_line_pred_data <- posterior_linpred(Height_by_weight_model, formula(height ~ weight), scale = "linear")
plot(post_line_pred_data)
cor.test <- Height_by_weight_model <-
brm(data = d2, family = gaussian,
height ~ weight,
prior = c(prior(normal(156, 100), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 3), class = sigma)),
iter = 2000,
warmup = 5000,
chains = 4,
cores = 4,
seed = 4,
save_all_pars = TRUE)
cor.test <- Height_by_weight_model <-
brm(data = d2, family = gaussian,
height ~ weight,
prior = c(
prior(normal(0, 10), class = b),
prior(cauchy(0, 3), class = sigma)),
iter = 2000,
warmup = 5000,
chains = 4,
cores = 4,
seed = 4,
save_all_pars = TRUE)
cor.test <- Height_by_weight_model <-
brm(data = d2, family = gaussian,
height ~ weight,
iter = 2000,
warmup = 5000,
chains = 4,
cores = 4,
seed = 4,
save_all_pars = TRUE)
cor.test <- Height_by_weight_model <-
brm(data = d2, family = gaussian,
height ~ weight,
iter = 2000,
warmup = 500,
chains = 4,
cores = 4,
seed = 4,
save_all_pars = TRUE)
print(cor.test)
print(Height_by_weight_model)
library(rethinking)
data("rugged")
d <- rugged
detach(package:rethinking, unload = T)
library(brms)
rm(rugged)
rm(rugged)
library(tidyverse)
# make the log version of criterion
d <-
d %>%
mutate(log_gdp = log(rgdppc_2000))
source('~/.active-rstudio-document', echo=TRUE)
# extract countries with GDP data
dd <-
d %>%
filter(complete.cases(rgdppc_2000))
# split the data into countries in Africa and not in Africa
d.A1 <-
dd %>%
filter(cont_africa == 1)
d.A0 <-
dd %>%
filter(cont_africa == 0)
b7.1 <-
brm(data = d.A1, family = gaussian,
log_gdp ~ 1 + rugged,
prior = c(prior(normal(8, 100), class = Intercept),
prior(normal(0, 1), class = b),
prior(uniform(0, 10), class = sigma)),
iter = 2000, warmup = 1000, chains = 4, cores = 4,
seed = 7)
View(dd)
b7.3 <-
update(b7.1,
newdata = dd)
View(dd)
b7.3$formula
dd$cont_africa
height_and_sex <- update(Height_by_weight_model,
newdata = d2,
formula. = height ~ 1 + weight + male)
height_lm_simple <- add_criterion(Height_by_weight_model, c("loo", "waic"))
add_criterion()
add_criterion??
add_criterion??
add_criterion??
??add_criterion
??
?cir
?cor
version(brms)
package_version(brms)
package_version("brms")
update.packages("brms")
install.packages("brms")
install.packages("brms")
library(tibble)
library(ggplot2)
library(rethinking)
library(rstan)
library(brms)
library(dplyr)
library(tidyr)
library(tidyverse)
library(mvtnorm)
library(plotly)
library(MASS)
library("brms", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
cor.test <- Height_by_weight_model <-
brm(data = d2, family = gaussian,
height ~ weight,
iter = 2000,
warmup = 500,
chains = 4,
cores = 4,
seed = 4,
save_all_pars = TRUE)
detach("package:brms", unload=TRUE)
library("brms", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
version
library(installr)
setwd("~/Documents/GitHub/CatTextToData")
library(tidyverse)
input <- read_lines('Example_data')
# do the match and keep only the second column
header <- as_tibble(str_match(input, "^(.*?)\\s+Score.*")[, 2, drop = FALSE])
colnames(header) <- 'title'
# add index to the list so we can match the scores that come after
header <- header %>%
mutate(row = row_number()) %>%
fill(title)  # copy title down
# pull off the scores on the numbered rows
scores <- str_match(input, "^([0-9]+[. ]+)(.*?)\\s+([0-9]+)\\s+([0-9*]+)$")
scores <- as_tibble(scores) %>%
mutate(row = row_number())
# keep only rows that are numbered and delete first column
scores <- scores[!is.na(scores[,1]), -1]
# merge the header with the scores to give each section
table <- left_join(scores,
header,
by = 'row'
)
colnames(table) <- c('index', 'type', 'Score', 'T-Score', 'row', 'title')
View(table)
###############Attempting to automate with multiple files##################
temp = list.files(pattern="*.txt")
###############Attempting to automate with multiple files##################
temp = list.files(pattern="*csv")
###############Attempting to automate with multiple files##################
temp = list.files()
###############Attempting to automate with multiple files##################
temp = list.files(pattern = *Example)
###############Attempting to automate with multiple files##################
temp = list.files(pattern = "*Example")
myfiles = lapply(temp, read.delim)
myfiles = lapply(temp, readLines)
??`purrr-package`
library("repurrrsive", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
myfiles2 <-map(myfiles, as_tibble(str_match(input, "^(.*?)\\s+Score.*")[, 2, drop = FALSE]))
myfiles2 <-lmap(myfiles, as_tibble(str_match(input, "^(.*?)\\s+Score.*")[, 2, drop = FALSE]))
myfiles2 <-lmap(myfiles, as_tibble(str_match(input, "^(.*?)\\s+Score.*")))
myfiles2 <-lmap(myfiles, as_tibble(str_match(myfiles, "^(.*?)\\s+Score.*")))
myfiles2 <-lmap(myfiles, as_tibble %>% str_match(myfiles, "^(.*?)\\s+Score.*")))
myfiles2 <-lmap(myfiles, as_tibble %>% str_match(myfiles, "^(.*?)\\s+Score.*"))
myfiles2 <-lmap(myfiles, as_tibble %>% str_match(myfiles2, "^(.*?)\\s+Score.*"))
myfiles2 <-lmap(myfiles[1:3], as_tibble(str_match(input, "^(.*?)\\s+Score.*"))
myfiles2 <-lmap(myfiles[1:3], as_tibble(str_match(myfiles[1:3], "^(.*?)\\s+Score.*")[, 2, drop = FALSE]))
myfiles2 <-map(myfiles[1:3], as_tibble(str_match(myfiles[1:3], "^(.*?)\\s+Score.*")[, 2, drop = FALSE]))
myfiles2 <-map(myfiles[1:3], as_tibble)
myfiles2 <-map(myfiles[1:3], as_tibble([,2, drop = FALSE]))
myfiles2 <-map(myfiles[1:3], as_tibble[, 2, drop = FALSE])
myfiles3 <- map(myfiles2[1:3], str_match(input, "^(.*?)\\s+Score.*"))
View(myfiles2)
myfiles3 <- map(myfiles2[1:3], str_match("^(.*?)\\s+Score.*"))
myfiles3 <- map(myfiles2[1:3], str_match(myfiles2[1:3], "^(.*?)\\s+Score.*"))
View(myfiles3)
myfiles3 <- map(myfiles2[1:3], str_match(pattern =  "^(.*?)\\s+Score.*"))
myfiles2[[1]]
myfiles3 <- map(myfiles2[[1:3]], str_match(pattern =  "^(.*?)\\s+Score.*"))
myfiles2[[1:3]]
myfiles2[[2]]
myfiles2[[1:2]]
myfiles2[[1:2],]
myfiles2[[c(1:2)]]
